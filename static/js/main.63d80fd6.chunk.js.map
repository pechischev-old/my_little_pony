{"version":3,"sources":["components/alert/EAlertType.ts","components/fields/RangeField.tsx","components/fields/SelectField.tsx","components/fields/RadioField.tsx","views/filter/Filter.tsx","AppContext.ts","components/pagination/Pagination.tsx","components/list/List.tsx","components/list/ListItem.tsx","components/modal/Modal.tsx","components/alert/Alert.tsx","views/catalog/Catalog.tsx","config/constants.ts","views/basket/Basket.tsx","models/CatalogRepository.ts","models/ColorRepository.ts","models/KindRepository.ts","models/BasketRepository.ts","services/BasketService.ts","App.tsx","services/CatalogService.ts","serviceWorker.ts","index.tsx"],"names":["EAlertType","RangeField","name","label","type","rest","className","component","placeholder","SelectField","options","disabled","map","id","title","value","key","RadioField","values","index","Filter","colors","kinds","onSubmit","render","handleSubmit","submitting","pristine","form","onClick","reset","AppContext","React","createContext","AppProvider","Provider","Pagination","totalCount","step","onChangePage","useState","page","setPage","useEffect","isBeginPage","isEndPage","Math","min","data-disabled","max","countPages","ceil","position","List","items","item","ListItem","isNew","color","price","kind","Modal","props","visible","onClose","children","modal","useRef","createPortal","data-hidden","aria-hidden","ref","document","body","Alert","NONE","isShow","changeShow","data-open","data-type","Catalog","filters","appendToBasket","catalogService","useContext","count","content","setContent","getListData","limit","length","Basket","removeFromBasket","slice","ponies","require","CatalogRepository","this","params","filter","filterItems","from","to","Infinity","containPrice","hasColor","hasKind","hasNewStatus","ColorRepository","find","KindRepository","BasketRepository","load","getItem","push","save","localStorage","setItem","STORAGE_KEY","JSON","stringify","data","parse","e","console","error","removeItem","BasketService","repository","append","remove","removeAll","getItems","catalogRepository","colorRepository","kindRepository","matching","basketService","Boolean","window","location","hostname","match","ReactDOM","setFilters","basketModal","changeBasketModal","filterModal","changeFilterModal","basketItems","changeBasketItem","isOnline","changeOnline","isSuccessAlert","changeSuccessAlert","onoffline","ononline","hasBasketItems","clear","getColors","getKinds","NEGATIVE","POSITIVE","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63d80fd6.chunk.js","sourcesContent":["export enum EAlertType {\r\n    NONE = \"none\",\r\n    NEGATIVE = \"negative\",\r\n    POSITIVE = \"positive\",\r\n    NEUTRAL = \"neutral\",\r\n}","import React, { FC } from 'react';\r\nimport { IFieldProps } from './IField';\r\nimport { Field } from 'react-final-form';\r\n\r\nexport const RangeField: FC<IFieldProps<number | string>> = ({name, label, type, ...rest}) => (\r\n    <div className={'field range-field'}>\r\n        <label>{label}</label>\r\n        <Field\r\n            name={`${name}.from`}\r\n            type={type}\r\n            component='input'\r\n            placeholder={'от'}\r\n            {...rest}\r\n        />\r\n        <Field\r\n            name={`${name}.to`}\r\n            type={type}\r\n            component='input'\r\n            placeholder={'до'}\r\n            {...rest}\r\n        />\r\n    </div>\r\n);","import React, { FC } from 'react';\r\nimport { IFieldProps } from './IField';\r\nimport { IItem } from '../../interfaces';\r\nimport { Field } from 'react-final-form';\r\n\r\ninterface ISelectFieldProps extends IFieldProps<number | string> {\r\n    options: IItem[]\r\n}\r\n\r\nexport const SelectField: FC<ISelectFieldProps> = ({options = [], name, label, placeholder, type, ...rest}) => (\r\n    <div className={'field select-field'}>\r\n        <label>{label}</label>\r\n        <Field\r\n            name={name}\r\n            placeholder={placeholder}\r\n            component='select'\r\n            {...rest}\r\n        >\r\n            <option disabled>{placeholder}</option>\r\n            {options.map(({id, title}) => <option value={id} key={id}>{title}</option>)}\r\n        </Field>\r\n    </div>\r\n);","import React, { FC } from 'react';\r\nimport { IFieldProps } from './IField';\r\nimport { Field } from 'react-final-form';\r\n\r\ninterface IRadioValue {\r\n    label: string;\r\n    value: number | string | undefined;\r\n}\r\n\r\ninterface IRadioFieldProps extends IFieldProps<IRadioValue> {\r\n    values: IRadioValue[];\r\n}\r\n\r\nexport const RadioField: FC<IRadioFieldProps> = ({name, values = [], label}) => (\r\n    <div className={'field radio-field'}>\r\n        <label>{label}</label>\r\n        <div>\r\n            {\r\n                values.map(({value, label}, index) => (\r\n                    <label key={index}>\r\n                        <Field\r\n                            name={name}\r\n                            component='input'\r\n                            type='radio'\r\n                            value={value}\r\n                        />{' '}\r\n                        {label}\r\n                    </label>\r\n                ))\r\n            }\r\n        </div>\r\n    </div>\r\n);","import { Form } from 'react-final-form';\r\nimport React, { FC } from 'react';\r\nimport { IFilterParams, IItem } from '../../interfaces';\r\nimport { RadioField, RangeField, SelectField } from '../../components/fields';\r\n\r\ninterface IFilterProps {\r\n    colors: IItem[];\r\n    kinds: IItem[];\r\n\r\n    onSubmit(data: IFilterParams): void;\r\n}\r\n\r\nexport const Filter: FC<IFilterProps> = ({colors, kinds, onSubmit}) => {\r\n    return (\r\n        <Form\r\n            onSubmit={onSubmit}\r\n            render={({handleSubmit, submitting, pristine, form}) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    <RangeField\r\n                        label={'Цена'}\r\n                        name={'price'}\r\n                        type={'number'}\r\n                    />\r\n\r\n                    <SelectField options={colors} name={'color'} label={'Цвет'} placeholder={'Выберите цвет'}/>\r\n                    <SelectField options={kinds} name={'kind'} label={'Вид'} placeholder={'Выберите вид'}/>\r\n                    <RadioField\r\n                        values={[\r\n                            {label: 'Да', value: '1'},\r\n                            {label: 'Нет', value: '0'},\r\n                        ]}\r\n                        label={'Новинка'}\r\n                        name={'isNew'}\r\n                    />\r\n\r\n                    <div>\r\n                        <button type='submit' disabled={submitting || pristine}>\r\n                            Найти\r\n                        </button>\r\n                        <button\r\n                            type='button'\r\n                            onClick={() => {\r\n                                form.reset();\r\n                                handleSubmit();\r\n                            }}\r\n                            disabled={submitting || pristine}\r\n                        >\r\n                            Сбросить\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        />\r\n    );\r\n};","import { CatalogService } from './services';\r\nimport React from 'react';\r\n\r\nexport interface IAppContext {\r\n    catalogService: CatalogService\r\n}\r\n\r\nexport const AppContext = React.createContext<IAppContext>({} as IAppContext);\r\nexport const AppProvider = AppContext.Provider;","import React, { FC, useEffect, useState } from 'react';\r\nimport './Pagination.scss';\r\n\r\ninterface IPagination {\r\n    totalCount: number;\r\n    step: number;\r\n\r\n    onChangePage(page: number): void;\r\n}\r\n\r\nexport const Pagination: FC<IPagination> = ({totalCount, step, onChangePage}) => {\r\n    const [page, setPage] = useState(0);\r\n\r\n    useEffect(() => {\r\n        onChangePage(page);\r\n    });\r\n\r\n    const getRange = () => ({\r\n        start: page,\r\n        end: Math.min(step + page, totalCount)\r\n    });\r\n\r\n    const isBeginPage = page === 0;\r\n    const isEndPage = getRange().end === totalCount;\r\n\r\n    const onBeginPage = () => {\r\n        if (isBeginPage) {\r\n            return;\r\n        }\r\n        setPage(0);\r\n    };\r\n\r\n    const onPrevPage = () => {\r\n        if (isBeginPage) {\r\n            return;\r\n        }\r\n        setPage(Math.max(page - step, 0));\r\n    };\r\n\r\n    const onNextPage = () => {\r\n        if (isEndPage) {\r\n            return;\r\n        }\r\n        setPage(page + step);\r\n    };\r\n\r\n    const onEndPage = () => {\r\n        if (isEndPage) {\r\n            return;\r\n        }\r\n        const countPages = Math.ceil(totalCount / step);\r\n        const position = step * countPages;\r\n        setPage(position === totalCount ? position - step : position);\r\n    };\r\n\r\n    return (\r\n        <ul className={'pagination'}>\r\n            <li\r\n                className={'pagination__item'}\r\n                onClick={onBeginPage}\r\n                data-disabled={isBeginPage}\r\n            >\r\n                {'<<'}\r\n            </li>\r\n            <li\r\n                className={'pagination__item'}\r\n                onClick={onPrevPage}\r\n                data-disabled={isBeginPage}\r\n            >\r\n                {'<'}\r\n            </li>\r\n            <li\r\n                className={'pagination__item'}\r\n                onClick={onNextPage}\r\n                data-disabled={isEndPage}\r\n            >\r\n                {'>'}\r\n            </li>\r\n            <li\r\n                className={'pagination__item'}\r\n                onClick={onEndPage}\r\n                data-disabled={isEndPage}\r\n            >\r\n                {'>>'}\r\n            </li>\r\n        </ul>\r\n    );\r\n};","import React, { FC, ReactElement } from 'react';\r\nimport './List.scss';\r\n\r\ninterface ICatalogProps<T> {\r\n    items: T[];\r\n    render: (item: T) => ReactElement;\r\n}\r\n\r\n// TODO: убрать any\r\nexport const List: FC<ICatalogProps<any>> = ({items, render}) => {\r\n    return (\r\n        <div className={'list'}>\r\n            {\r\n                items.map((item, index) => (\r\n                    <div className={'list__item'} key={index}>\r\n                        {render(item)}\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};","import React, { FC } from 'react';\r\nimport { IListItem } from '../../interfaces';\r\n\r\ninterface IListItemProps {\r\n    item: IListItem\r\n}\r\n\r\nexport const ListItem: FC<IListItemProps> = ({item}) => {\r\n    const {name, isNew, color, price, kind} = item;\r\n    const label = isNew ? 'Новый' : ' ';\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div>Цвет {color}</div>\r\n                <div>Тип {kind}</div>\r\n                <div>Цена {price}</div>\r\n                <div>{label}</div>\r\n            </div>\r\n            <div>{name}</div>\r\n        </div>\r\n    );\r\n};","import React, { FC, useRef } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport './Modal.scss';\r\n\r\ninterface IModalProps {\r\n    visible: boolean;\r\n    title?: string;\r\n\r\n    onClose?(): void;\r\n}\r\n\r\nexport const Modal: FC<IModalProps> = (props) => {\r\n    const { visible, title, onClose, children } = props;\r\n    const modal = useRef<HTMLDivElement>(null);\r\n\r\n    return createPortal(\r\n        <div\r\n            className={'modal-layout'}\r\n            data-hidden={!visible}\r\n        >\r\n            <div\r\n                aria-hidden={true}\r\n                onClick={onClose}\r\n                className=\"modal-layout__overlay\"\r\n            />\r\n            <div className=\"modal\" ref={modal}>\r\n                <div className=\"modal__header\">\r\n                    <button\r\n                        className=\"modal__close\"\r\n                        onClick={onClose}\r\n                    >\r\n                        X\r\n                    </button>\r\n                </div>\r\n                {title && (\r\n                    <div className=\"modal__title\">\r\n                        {title}\r\n                    </div>\r\n                )}\r\n                <div className=\"modal__content\">\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        </div>,\r\n        document.body\r\n    );\r\n};","import * as React from \"react\";\r\nimport { FC } from \"react\";\r\nimport { EAlertType } from \"./EAlertType\";\r\nimport \"./Alert.scss\";\r\n\r\ninterface IAlertProps {\r\n    title: string;\r\n    type: EAlertType;\r\n    isShow: boolean;\r\n\r\n    changeShow?(): void;\r\n}\r\n\r\nexport const Alert: FC<IAlertProps> = ({\r\n                                           title = \"\",\r\n                                           type = EAlertType.NONE,\r\n                                           isShow,\r\n                                           changeShow\r\n                                       }) => {\r\n    return (\r\n        <div className=\"alert\" data-open={isShow} data-type={type} onClick={changeShow}>\r\n            <span>{title}</span>\r\n            <div className=\"icon\">\r\n                X\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React, { FC, Fragment, useContext, useEffect, useState } from 'react';\r\nimport { AppContext } from '../../AppContext';\r\nimport { IListItem, IListData, IFilterParams } from '../../interfaces';\r\nimport { List, ListItem, Pagination } from '../../components';\r\nimport { ITEMS_LIMIT } from '../../config';\r\n\r\ninterface ICatalogProps {\r\n    filters: IFilterParams;\r\n\r\n    appendToBasket(item: IListItem): void;\r\n}\r\n\r\nexport const Catalog: FC<ICatalogProps> = ({filters, appendToBasket}) => {\r\n    const {catalogService} = useContext(AppContext);\r\n\r\n    const [content, setContent] = useState<IListData<IListItem>>({items: [], count: 0});\r\n    const [page, setPage] = useState(0);\r\n\r\n    const {items, count} = content;\r\n\r\n    useEffect(() => {\r\n        setContent(catalogService.getListData({limit: ITEMS_LIMIT, page}, filters));\r\n    }, [page, filters]);\r\n\r\n    return (\r\n        <div className={'catalog'}>\r\n            {!items.length\r\n                ? 'Извините, по вашему запросу ничего не найдено' : (\r\n                    <Fragment>\r\n                        <List\r\n                            items={items}\r\n                            render={(item: IListItem) =>\r\n                                <Fragment>\r\n                                    <ListItem item={item}/>\r\n                                    <div onClick={() => appendToBasket(item)}><strong>В корзину</strong></div>\r\n                                </Fragment>\r\n                            }\r\n                        />\r\n                        < Pagination\r\n                            step={ITEMS_LIMIT}\r\n                            totalCount={count}\r\n                            onChangePage={setPage}\r\n                        />\r\n                    </Fragment>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n};","export const ITEMS_LIMIT = 20;","import React, { FC, Fragment, useEffect, useState } from 'react';\r\nimport { List, ListItem, Pagination } from '../../components';\r\nimport { IListItem, IListData } from '../../interfaces';\r\nimport { ITEMS_LIMIT } from '../../config';\r\n\r\ninterface IBasketProps {\r\n    items: IListItem[];\r\n\r\n    removeFromBasket(item: IListItem): void;\r\n}\r\n\r\nexport const Basket: FC<IBasketProps> = ({removeFromBasket, items}) => {\r\n    const [page, setPage] = useState(0);\r\n    const [content, setContent] = useState<IListData<IListItem>>({items, count: 0});\r\n\r\n    useEffect(() => {\r\n        setContent({items: items.slice(page, page + ITEMS_LIMIT), count: items.length});\r\n    }, [page, items]);\r\n\r\n    return (\r\n        <div className={'basket'}>\r\n            {!items.length ? <div>Ваша корзина пуста</div> : (\r\n                <Fragment>\r\n                    <List\r\n                        items={content.items}\r\n                        render={(item: IListItem) =>\r\n                            <Fragment>\r\n                                <ListItem item={item}/>\r\n                                <div onClick={() => removeFromBasket(item)}>X</div>\r\n                            </Fragment>\r\n                        }\r\n                    />\r\n                    <Pagination\r\n                        step={ITEMS_LIMIT}\r\n                        totalCount={content.count}\r\n                        onChangePage={setPage}\r\n                    />\r\n                </Fragment>\r\n            )}\r\n        </div>\r\n    );\r\n};","import { IFilterParams, IListData, IListParams } from '../interfaces';\r\nconst ponies = require('./mocks/ponies.json');\r\n\r\ninterface ICatalogItem {\r\n    id: number;\r\n    price: number;\r\n    name: string;\r\n    color: number;\r\n    kind: number;\r\n    isNew: boolean;\r\n}\r\n\r\nexport class CatalogRepository {\r\n    private items: ICatalogItem[] = [];\r\n\r\n    constructor() {\r\n        this.items = ponies;\r\n    }\r\n\r\n    matching(params: IListParams, filters: IFilterParams): IListData<ICatalogItem> {\r\n        const { limit, page } = params;\r\n        const items = this.items.filter((item) => this.filterItems(item, filters));\r\n        return {\r\n            items: items.slice(page, page + limit),\r\n            count: items.length\r\n        };\r\n    }\r\n\r\n    private filterItems(item: ICatalogItem, filters: IFilterParams): boolean {\r\n        const {price, color, kind, isNew} = filters || {};\r\n        const {from = 0, to = Infinity} = price || {};\r\n\r\n        const containPrice = +from <= item.price && item.price <= +to;\r\n        const hasColor = !!color ? +color === item.color : true;\r\n        const hasKind = !!kind ? +kind === item.kind : true;\r\n        const hasNewStatus = !!isNew ? !!+isNew === item.isNew : true;\r\n\r\n        return containPrice && hasColor && hasKind && hasNewStatus;\r\n    }\r\n}","import { IItem } from '../interfaces';\r\nconst colors = require('./mocks/colors.json');\r\n\r\nexport class ColorRepository {\r\n    private items: IItem[] = [];\r\n\r\n    constructor() {\r\n        this.items = colors;\r\n    }\r\n\r\n    getItems(): IItem[] {\r\n        return this.items;\r\n    }\r\n\r\n    getItem(id: number): IItem | undefined {\r\n        return this.items.find((item) => item.id === id);\r\n    }\r\n}","import { IItem } from '../interfaces';\r\nconst kinds = require('./mocks/kinds.json');\r\n\r\nexport class KindRepository {\r\n    private items: IItem[] = [];\r\n\r\n    constructor() {\r\n        this.items = kinds;\r\n    }\r\n\r\n    getItems(): IItem[] {\r\n        return this.items;\r\n    }\r\n\r\n    getItem(id: number): IItem | undefined {\r\n        return this.items.find((item) => item.id === id);\r\n    }\r\n}","import { IListItem } from '../interfaces';\r\n\r\nexport class BasketRepository {\r\n    private static STORAGE_KEY = 'shop_basket';\r\n    private items: IListItem[] = [];\r\n\r\n    constructor() {\r\n        this.load();\r\n    }\r\n\r\n    append(item: any) {\r\n        const {id} = item;\r\n        if (!!this.getItem(id)) {\r\n            return;\r\n        }\r\n        this.items.push(item);\r\n        this.save();\r\n    }\r\n\r\n    remove(id: number) {\r\n        if (!this.getItem(id)) {\r\n            return;\r\n        }\r\n        this.items = this.items.filter(item => item.id !== id);\r\n        this.save();\r\n    }\r\n\r\n    removeAll() {\r\n        this.items = [];\r\n        this.save();\r\n    }\r\n\r\n    getItems(): IListItem[] {\r\n        return this.items;\r\n    }\r\n\r\n    getItem(id: number) {\r\n        return this.items.find(item => item.id === id);\r\n    }\r\n\r\n    private save() {\r\n        localStorage.setItem(BasketRepository.STORAGE_KEY, JSON.stringify(this.items));\r\n    }\r\n\r\n    private load() {\r\n        const data = localStorage.getItem(BasketRepository.STORAGE_KEY);\r\n        if (!data) {\r\n            return;\r\n        }\r\n        try {\r\n            this.items = JSON.parse(data);\r\n        } catch (e) {\r\n            console.error('Can`t load basket data');\r\n            this.items = [];\r\n            localStorage.removeItem(BasketRepository.STORAGE_KEY);\r\n        }\r\n\r\n    }\r\n}","import { IListItem } from '../interfaces';\r\nimport { BasketRepository } from '../models';\r\n\r\nexport class BasketService {\r\n    private repository = new BasketRepository();\r\n\r\n    append(item: IListItem) {\r\n        this.repository.append(item);\r\n    }\r\n\r\n    remove(id: number) {\r\n        this.repository.remove(id);\r\n    }\r\n\r\n    clear() {\r\n        this.repository.removeAll();\r\n    }\r\n\r\n    getItems() {\r\n        return this.repository.getItems();\r\n    }\r\n}","import React, { FC, useEffect, useState } from 'react';\nimport { Basket, Catalog, Filter } from './views';\nimport { BasketService, CatalogService } from './services';\nimport { AppProvider } from './AppContext';\nimport { Modal } from './components/modal';\nimport { IFilterParams, IListItem } from './interfaces';\nimport { Alert, EAlertType } from './components/alert';\n\nconst catalogService = new CatalogService();\nconst basketService = new BasketService();\n\nexport const App: FC = () => {\n    const [filters, setFilters] = useState<IFilterParams>({} as IFilterParams);\n    const [basketModal, changeBasketModal] = useState(false);\n    const [filterModal, changeFilterModal] = useState(false);\n    const [basketItems, changeBasketItem] = useState<IListItem[]>(basketService.getItems());\n    const [isOnline, changeOnline] = useState(true);\n    const [isSuccessAlert, changeSuccessAlert] = useState(false);\n\n    useEffect(() => {\n        window.onoffline = () => changeOnline(false);\n        window.ononline = () => changeOnline(true);\n    }, []);\n\n    const appendToBasket = (item: IListItem) => {\n        basketService.append(item);\n        changeBasketItem([...basketService.getItems()]);\n    };\n\n    const removeFromBasket = (item: IListItem) => {\n        basketService.remove(item.id);\n        changeBasketItem([...basketService.getItems()]);\n    };\n\n    const buyItems = () => {\n        changeSuccessAlert(true);\n        basketService.clear();\n        changeBasketItem([...basketService.getItems()]);\n    };\n    const hasBasketItems = !!basketItems.length;\n\n    return (\n        <div className='App'>\n            <AppProvider value={{catalogService}}>\n                <header>\n                    <button disabled={!hasBasketItems} onClick={() => changeBasketModal(true)}>Корзина {basketItems.length} шт.</button>\n                    <button onClick={() => changeFilterModal(true)}>Фильтры</button>\n                </header>\n\n                <Catalog filters={filters} appendToBasket={appendToBasket}/>\n                <Modal visible={basketModal} onClose={() => changeBasketModal(false)}>\n                    <Basket items={basketItems} removeFromBasket={removeFromBasket}/>\n                    <div>\n                        <button disabled={!isOnline || !hasBasketItems} onClick={buyItems}>Купить</button>\n                    </div>\n                </Modal>\n\n                <Modal visible={filterModal} onClose={() => changeFilterModal(false)}>\n                    <Filter onSubmit={setFilters} colors={catalogService.getColors()} kinds={catalogService.getKinds()}/>\n                </Modal>\n\n                <Alert title={'Нет сети'} type={EAlertType.NEGATIVE} isShow={!isOnline}/>\n                <Alert title={'Заказ создан'} type={EAlertType.POSITIVE} isShow={isSuccessAlert} changeShow={() => changeSuccessAlert(false)}/>\n            </AppProvider>\n        </div>\n    );\n};","import { CatalogRepository, ColorRepository, KindRepository } from '../models';\r\nimport { IFilterParams, IItem, IListItem, IListParams, IListData } from '../interfaces';\r\n\r\nexport class CatalogService {\r\n    private catalogRepository = new CatalogRepository();\r\n    private colorRepository = new ColorRepository();\r\n    private kindRepository = new KindRepository();\r\n\r\n    getListData(params: IListParams, filters: IFilterParams): IListData<IListItem> {\r\n        const {items, count} = this.catalogRepository.matching(params, filters);\r\n        return {\r\n            count,\r\n            items: items.map(({color, kind, ...rest}) => ({\r\n                ...rest,\r\n                color: this.colorRepository.getItem(color)?.title,\r\n                kind: this.kindRepository.getItem(color)?.title\r\n            })) ,\r\n        }\r\n    }\r\n\r\n    getColors(): IItem[] {\r\n        return this.colorRepository.getItems();\r\n    }\r\n\r\n    getKinds(): IItem[] {\r\n        return this.kindRepository.getItems();\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}